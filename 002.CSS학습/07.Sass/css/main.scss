// 메인 sass : main.scss


// sass 주석 (js와 같음)
// 주석 1
/* 주석2 */

    
/************************************************************************** 
    [사스 핵심 사용법]
    1. 사스 확장자별 파일 구분
    (1) .scss - 사스 관리파일
    -> .sass 확장자는 중괄호, 세미콜론 사용하지않는 문법 사스파일
        따라서 scss 파일을 사용할 것
    
    (2) .css.map - 사스파일과 CSS 연결정보 파일
    (3) .css - 실제로 적용되는 컴파일된 CSS

    2. 사스파일 컴파일하기
    -> Live Sass Compiler 확장프로그램 설치 후 하단 "Watch Sass" 클릭하여 작동시킴 
    => 에러가 없는 한 컴파일하여 같은 이름의 css 파일을 생성함 "Watching..." 상태가 됨. 
    다시 클릭시 실시간변환상태가 꺼진다 -> 에러 발생시 컴파일이 안되고 cmd창에 에러메시지가 나온다


    3. 주요 문법
    (1) 네스팅 기법 - 선택자 중괄호 안에 다른 하위선택을 하는 것 
    예) div{ h1{color: red;} } 
    장점) 같은 세팅 요소를 선택시 중복된 선택자의 반복을 하지않아도 됨
          또한 같은 구성요소를 묶어서 세팅 관리 가능

    (2) 속성접두어 묶음기법 - 공통된(반복되는) 같은 종류의 하위 속성을
        접두어를 한번만 사용하여 세팅을 묶어주는 방법
    예) font: {size:20px; weight:bold} -> 이때 세미콜론 뒤 중괄호는 꼭 띄어쓰기 

    (3) 변수 사용 기법 - 동일하게 사용할 값을 변수에 넣고 디자인을 배치함
    사용법) $변수명: 값 
    - 변수명은 모두 붙여쓰며 구분단어는 캐믈케이스(camelCase) 또는 케밥케이스(camel-case) 사용한다
    - 변수의 범위는 변수를 선언 후 하위로 상속되어 값이 유지된다

    (4) 파일 분리기법 : @import 
        - 부분 파일을 분리하여 공통 모듈로 합쳐서 사용한다
        - 부분 파일명 : 사스에서 언더바를 붙여서 사용하는 것이 원칙이지만, 
                        언더바를 안써도 기본적으로 부분파일처리해줌
        - 파일 호출시 확장자 생략 가능함(자동으로 앞에 언더바와 확장자를 생략해준다)
        예) @import "reset";
        - 일반 CSS @import와는 다름 -> http요청을 하지않음

    
    (5) 믹스인 : 일종의 공통 css 코드를 리턴하는 함수
        1) 세팅 형식

        [1] 전달변수가 있는 믹스인
        @mixin 믹스인이름(변수){CSS코드}

        [2] 전달변수가 없는 믹스인
        @mixin 믹스인이름{CSS코드}

        [3] 전달변수가 있고 기본값도 있는 믹스인
        @mixin 믹스인이름(변수: 기본값){CSS코드}

        2) 호출 방법 : 믹스인을 포함하라(@include)
        @include 믹스인이름(전달값);
        @include 믹스인이름;

    
    (6) 네스팅 이어붙이기 기법(&)
    - 가상요소, 가상클래스, 특정클래스를 현재 선택요소에 세팅하는 방법
    - & : 현재 선택요소 자신을 가르킴


    (7) 반복코드 확장 : @extend 클래스명
        1) 사용 이유 : 반복되는 같은 세팅을 클래스로 쉽게 도입한다
        2) 사용 방법 : 선택자 코드 안에 (@extend 클래스명) 형식
        3) 공통 코드 외에 다른 세팅 속성은 하단에 추가로 구현한다
        4) 장점 : 공통코드 적용을 위해 각 요소에 클래스를 일일히 주지 않아도
                  공통코드를 적용할 수 있다
    
    
**************************************************************************/



// 외부 변수세팅 sass 불러오기
@import "./data/variables";

// 초기화 세팅 sass 불러오기
@import "./common/reset";


///////////////// @mixin 세팅하기 /////////////
// (1) 타이틀 디자인 믹스인
// [1] 전달해서 변경할 값이 없다면 전달변수 없는 믹스인 만들기
// @mixin title-text{

// [2] 글자색을 전달해서 변경해야 하므로 전달변수를 만들어준다
// 변수는 $변수명으로 만들고 지역변수로 사용된다
//@mixin title-text($selColor){
    // $selColor 글자색 전달변수

// [3] 전달값을 보내지 않아도 에러나지 않도록 기본값 지정하기    
@mixin title-text($selColor:red){
    // $selColor 글자색 전달변수

    color: $selColor;

    // 하단 마진 
    margin-bottom: $fontSize1;
    // font와 text를 믹스인으로 만든다(재사용)
    // 속성 접두어 묶음기법

    // 폰트 설정 모음
        font: {
            size: 40px;
            family: "Times New Roman";
        }
    // 텍스트 설정 모음    
        text: {
            align: center;
            decoration: underline;
            underline-offset: 10px;
            shadow: 5px 5px 4px #0000008e;
        }
}

// (2) 박스 테두리 믹스인
@mixin box-border($bdColor:gray){
    border: {
        color: $bdColor;
        style : dashed;
        width: 7px;
    }

}

// 전체 페이지 요소
.wrapper{
    max-width: 1000px;
    margin: 0 auto;
}

// 상단영역
.top-area{
    color: $fontColor1;
    // 네스팅 기법
    h1{

        // 믹스인 호출
        @include title-text($fontColor1);

        //color: $mainColor2-2;

        /* // font와 text를 믹스인으로 만든다(재사용)
        // 속성 접두어 묶음기법
        font: {
            size: 40px;
            family: "Times New Roman";
        }
        text: {
            align: center;
            decoration: underline;
            underline-offset: 10px;
            shadow: 5px 5px 4px #0000008e;
        } */
        background: {
            color: lightpink;
            image: url(../images/flower.png);
            size: 200px;
            position: center;
            repeat: repeat-x;
        }
        padding: 20px;
    }
    
    // h2 css 적용하기
    h2{
        @extend .box-basic;
        font-size: $fontSize2;
        line-height: 1.5;
    }
}

// 메인 영역
.main-area{
    // 내부 박스 section
    section{
        // 박스 테두리 믹스인 호출
        @include box-border(pink);
        margin-bottom: 20px;
        padding: 20px;
    }

    // 메인 영역 타이틀 믹스인 호출
    h3{
        @include title-text(darkblue);
    }

    // 리스트, 문단 디자인
    ul,ol,p{
        line-height: 2;
        font-size: 24px;
        
        // 하위 li요소
        li{
            text: {
               decoration: underline;
               underline-offset: 10px;
               decoration-thickness: 3px;
               decoration-color: $mainColor2;
               align: center;
            }
            background-color: lavender;
            // 네스팅 이어붙이기 기법(&)
            // 첫번째 li 강조하기
            &:first-child{
                color: deeppink;
                font-weight: bold;
                font-size: $fontSize3;
                text-shadow:
                 1px 0  #000,
                 -1px 0  #000,
                 0 1px   #000,
                 0 -1px   #000;
            }
            // li 가상요소 블릿요소
            &::before{
                content: '🍣';

            }
        }

    }
}


// 버튼 기본디자인 클래스
.button-basic{
    display: inline-block;
    border: 1px solid #222;
    border-radius: 20px;
    padding: 15px 30px;
    font-size: 20px;
    cursor: pointer;
    margin-left: 20px;
}

// 일반 박스 기본
.box-basic{
    text-align: center;
    padding: 20px 0;

}

// 위의 기본 디자인 클래스를 특정클래스에 그래도 가져오고 싶을때
// @extend 클래스명

// 제출하기 버튼에 기본 버튼 디자인 입히기
.button-report{
    // 기본 버튼 클래스 가져오기
    @extend .button-basic;
    // 다른 디자인 요소는 추가로 구현
    background-color: lightyellow;
    color: gold;

}

// 기본 박스 디자인을 입혀서 버튼박스를 세팅
.button-box{
    // 기본박스 디자인 가져오기
    @extend .box-basic;
    // 추가 디자인은 아래에
    background-image: linear-gradient(to bottom, lavender, transparent);

}

// 하단 타이틀
.bottom-title{
    @include title-text;
    // 기본 박스 디자인 적용하기
    @extend .box-basic;
    
}