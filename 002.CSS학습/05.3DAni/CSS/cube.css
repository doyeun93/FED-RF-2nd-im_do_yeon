@charset "utf-8";

/* 큐브 애니메이션 CSS - cube.css */

html,
body {
  margin: 0;
  padding: 0;
}

body {
  background-image: linear-gradient(to bottom, powderblue, rgb(233, 208, 251));
  height: 100vh;
}

/* css 변수 세팅 */
:root {
  /* 큐브공통크기 */
  --cube-size: 300px;
  /* z축 거리 나눔수 */
  --divide-num: 2;
}

/* 큐브 */
.cube {
  position: absolute;
  /* 정가운데 정렬 -> 50%밀고 박스의 절반크기 빼기 */
  top: calc(50% - var(--cube-size) / 2);
  left: calc(50% - var(--cube-size) / 2);
  /* 부모는 보이는 화면 */
  /* 박스 크기 설정 */
  width: var(--cube-size);
  height: var(--cube-size);
  /* outline: 2px solid red; */
  /******************************************************** 
   [입체로 설정하기]
   - 입체로 설정할 요소의 부모박스에 아래와 같이 설정해준다
     (부모는 싸고 있는 요소)
      transform-style 속성값은 2가지
      1. flat (기본값) : 2D
      2. preserve-3d : 3D -> 이 값으로 설정함
  ********************************************************/
  transform-style: preserve-3d; /* 부모에게 3d 효과 줌 */

  /* 입체를 잘보이게 약간 회전함 */
  transform: rotateX(10deg) rotateY(30deg);
}

/* 큐브각면 공통 */
.cube span {
  position: absolute;
  /* 앱솔루트는 자동 block */
  width: 100%;
  height: 100%;
  /* outline: 2px dotted blue; */
  /* 투명도 */
  opacity: 0.8;

  /* 테두리 */
  border: 2px solid lightgrey;
  box-sizing: border-box;
}

/* 1. 앞면 */
.cube span:nth-child(1) {
  /* 배경 이미지 넣기 */
  background: url(../images/seoulCity.jpg) no-repeat center/cover;

  /* 화면 방향 z축 이동 -> translateZ 속성을 사용 / 양의 값은 앞쪽 , 음의 값은 뒤쪽*/
  transform: translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 앞쪽이동은 큐브 크기의 절반 */
}

/* 2. 오른쪽면 */
.cube span:nth-child(2) {
  /* 배경 이미지 넣기 */
  background: url(../images/newyorkCity.jpg) no-repeat right/auto 105%;

  /*y축 회전 + 화면방향(z축) 이동*/
  transform: rotateY(90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 이동은 큐브 크기의 절반 */
}

/* 3. 뒷면 */
.cube span:nth-child(3) {
  /* 배경 이미지 넣기 */
  background: url(../images/parisCity.jpg) no-repeat center/cover;

  /*y축 회전 + 화면방향(z축) 이동*/
  transform: rotateY(180deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 이동은 큐브 크기의 절반 */
}

/* 4. 왼쪽면 */
.cube span:nth-child(4) {
  /* 배경 이미지 넣기 */
  background: url(../images/cityMain.jpg) no-repeat center/cover;

  /*y축 회전 + 화면방향(z축) 이동*/
  transform: rotateY(-90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 이동은 큐브 크기의 절반 */
}

/* 5. 윗면 */
.cube span:nth-child(5) {
  /* 배경 이미지 넣기 */
  background: url(../images/citys.jpg) no-repeat center/cover;

  /*y축 회전 + 화면방향(z축) 이동*/
  transform: rotateX(90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 이동은 큐브 크기의 절반 */
}

/* 6. 아랫면 */
.cube span:nth-child(6) {
  /* 배경 이미지 넣기 */
  background: url(../images/London_city.jpg) no-repeat center/cover;

  /*y축 회전 + 화면방향(z축) 이동*/
  transform: rotateX(-90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 이동은 큐브 크기의 절반 */
}

/* 큐브 애니메이션 클래스 */
.rotate-cube {
  animation: cube-ani 3.5s linear infinite;
  /* 처음에 정지상태 */
  animation-play-state: paused;
}

/* 큐브 애니메이션 키프레임 */
@keyframes cube-ani {
  to {
    transform: rotateX(370deg) rotateY(390deg) rotateZ(360deg);
    /* 
     .cube에 transform 값을 줬기 때문에 맞추기 위해

            x축 양의 방향으로 10도에서 출발
            양의 방향 360도+10도=370도
            음의 방향 -360도+10도=-350도
            ____________________________

            y축 양의 방향으로 30도에서 출발
            양의 방향 360도+30도=390도
            음의 방향 -360도+30도=-330도
        */
  }
} /* 키 프레임 */
